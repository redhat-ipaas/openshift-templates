- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-atlasmap
    labels:
      app: syndesis
      component: syndesis-atlasmap

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: syndesis
      component: syndesis-atlasmap
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: syndesis-atlasmap-tls
    name: syndesis-atlasmap
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: syndesis
      component: syndesis-atlasmap

- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: syndesis
      component: syndesis-atlasmap
    name: syndesis-atlasmap
  spec:
    host: ${ROUTE_HOSTNAME}
    path: /v2/atlas
    port:
      targetPort: 8080
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: syndesis-atlasmap
      weight: 100

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: syndesis
      component: syndesis-atlasmap
    name: syndesis-atlasmap
  spec:
    replicas: 1
    selector:
      app: syndesis
      component: syndesis-atlasmap
      deploymentconfig: syndesis-atlasmap
    strategy:
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
      type: Recreate
    template:
      metadata:
        labels:
          app: syndesis
          component: syndesis-atlasmap
          deploymentconfig: syndesis-atlasmap
        annotations:
          pod.beta.kubernetes.io/init-containers: |-
            [{
              "name": "openshift-ca-pemtokeystore",
              "image": "{{^WithInitContainerDockerImages}}' '{{/WithInitContainerDockerImages}}{{#WithInitContainerDockerImages}}${SYNDESIS_REGISTRY}/{{ Images.SyndesisImagesPrefix }}/{{ Images.Support.PemToKeystore }}:{{ Tags.PemToKeystore }}{{/WithInitContainerDockerImages}}",
              "imagePullPolicy": "IfNotPresent",
              "args": [
                "-keystore", "/tls-keystore/openshift-truststore.jks",
                "-ca-file", "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                "-ca-file", "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt",
                "-ca-dir", "/usr/share/ca-certificates/mozilla"
              ],
              "volumeMounts": [{
                "name": "syndesis-atlasmap-tls",
                "mountPath": "/tls-keystore"
              }],
              "resources": {
                "limits": {
                  "memory": "255Mi"
                },
                "requests": {
                  "memory": "20Mi"
                }
              }
            }]
      spec:
        initContainers:
        - name: openshift-ca-pemtokeystore
          image: {{^WithInitContainerDockerImages}}' '{{/WithInitContainerDockerImages}}{{#WithInitContainerDockerImages}}${SYNDESIS_REGISTRY}/{{ Images.SyndesisImagesPrefix }}/{{ Images.Support.PemToKeystore }}:{{ Tags.PemToKeystore }}{{/WithInitContainerDockerImages}}
          imagePullPolicy: IfNotPresent
          args:
          - -keystore
          - /tls-keystore/openshift-truststore.jks
          - -ca-file
          - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - -ca-file
          - /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          - -ca-dir
          - /usr/share/ca-certificates/mozilla
          volumeMounts:
          - name: syndesis-atlasmap-tls
            mountPath: /tls-keystore
          resources:
            limits:
              memory: 255Mi
            requests:
              memory: 20Mi
        serviceAccountName: syndesis-atlasmap
        containers:
        - name: atlasmap
          env:
          - name: HOME
            value: /deployments
          - name: JAVA_TOOL_OPTIONS
            value: '-Duser.home=/deployments -Duser.name=jboss'
          - name: AB_JOLOKIA_OFF
            value: "true"
          - name: JAVA_APP_DIR
            value: /deployments
          - name: AB_OFF
            value: "true"
          - name: JAVA_OPTIONS
            value: "-Djava.net.preferIPv4Stack=true -Djavax.net.ssl.trustStore=/tls-keystore/openshift-truststore.jks -Duser.home=/tmp"
{{^WithDockerImages}}
          image: ' '
{{/WithDockerImages}}{{#WithDockerImages}}
          image: ${SYNDESIS_REGISTRY}/{{Images.AtlasMapImagesPrefix}}/{{ Images.Syndesis.Atlasmap }}:{{ Tags.Atlasmap }}
{{/WithDockerImages}}
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: "/health"
              port: 8181
            initialDelaySeconds: 10
          livenessProbe:
            httpGet:
              path: "/health"
              port: 8181
            initialDelaySeconds: 180
          ports:
          - containerPort: 8080
            name: http
          - containerPort: 9779
            name: prometheus
          - containerPort: 8778
            name: jolokia
          volumeMounts:
          - name: syndesis-atlasmap-tls
            mountPath: /tls-keystore
          - name: config-volume
            mountPath: /deployments/config
          resources:
            limits:
              memory: 612Mi
            requests:
              memory: 255Mi
        volumes:
        - name: syndesis-atlasmap-tls
          emptyDir: {}
        - name: config-volume
          configMap:
            name: syndesis-atlasmap-config
    triggers:
    - type: ConfigChange
{{^WithDockerImages}}
    - imageChangeParams:
        automatic: true
        containerNames:
        - atlasmap
        from:
          kind: ImageStreamTag
          name: {{ Images.Syndesis.Atlasmap }}:{{ Tags.Atlasmap }}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
{{/WithDockerImages}}
{{^WithInitContainerDockerImages}}
    - imageChangeParams:
        automatic: true
        containerNames:
        - openshift-ca-pemtokeystore
        from:
          kind: ImageStreamTag
          name: {{ Images.Support.PemToKeystore }}:{{ Tags.PemToKeystore }}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
{{/WithInitContainerDockerImages}}

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      component: syndesis-atlasmap
    name: syndesis-atlasmap-config
  data:
    application.yml: |-
      cors:
{{^AllowLocalHost}}
        allowedOrigins: https://${ROUTE_HOSTNAME}
{{/AllowLocalHost}}{{#AllowLocalHost}}
        allowedOrigins: http://localhost:4200, https://localhost:4200, https://${ROUTE_HOSTNAME}
{{/AllowLocalHost}}
      spring:
        zipkin:
          enabled: false
      security:
        basic:
          enabled: false
      management:
        port: 8181
        security:
          enabled: true
      endpoints:
        health:
          sensitive: false
