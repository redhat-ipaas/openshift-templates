- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      component: syndesis-db
    name: syndesis-sampledb-config
  data:
    add-sample-db.sh: |
      #!/bin/bash
      until bash -c "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"; do
        echo "Waiting for Postgres server..."
        sleep 1
      done
      echo "----- creating sampledb"
      psql -f /var/lib/pgsql/sampledb/add-sample-db.sql -v user=sampledb -v password=$POSTGRESQL_SAMPLEDB_PASSWORD
      echo "----- sampledb created"
    add-sample-db.sql: |
      CREATE USER :user WITH PASSWORD ':password';
      CREATE DATABASE :user;
      GRANT ALL PRIVILEGES ON DATABASE :user to :user;

      \c :user
      CREATE SCHEMA AUTHORIZATION :user;
      ALTER DEFAULT PRIVILEGES IN SCHEMA :user GRANT ALL ON TABLES TO :user;
      CREATE TABLE IF NOT EXISTS :user.LOG(a INTEGER, b INTEGER, c INTEGER, date timestamp);

      CREATE OR REPLACE FUNCTION :user.demo_add(
        a numeric,
        b numeric,
        OUT c numeric)
        RETURNS numeric
        LANGUAGE 'plpgsql'

      AS $BODY$
      BEGIN
        c := a + b;
        insert into log(a,b,c,date) VALUES (a,b,c,now());
        return;
      END;
      $BODY$;

      ALTER FUNCTION :user.demo_add(numeric, numeric)
        OWNER TO :user;
      \q
    postStart.sh: |
      #!/bin/bash
      /var/lib/pgsql/sampledb/add-sample-db.sh &>  /proc/1/fd/1

- apiVersion: v1
  kind: Service
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      component: syndesis-db
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: syndesis
      component: syndesis-db
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
{{^Ephemeral}}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      component: syndesis-db
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_CAPACITY}
{{/Ephemeral}}    
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app: syndesis
      component: syndesis-db
    name: syndesis-db
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      component: syndesis-db
  spec:
    replicas: 1
    selector:
      app: syndesis
      component: syndesis-db
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: syndesis
          component: syndesis-db
      spec:
        serviceAccountName: syndesis-db
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          - name: POSTGRESQL_SAMPLEDB_PASSWORD
            value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
          image: ' '
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - /var/lib/pgsql/sampledb/postStart.sh
          livenessProbe:
            initialDelaySeconds: 60
            tcpSocket:
              port: 5432
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
          # DB QoS class is "Guaranteed" (requests == limits)
          # Note: On OSO there is no Guaranteed class, its always burstable
          resources:
            limits:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
            requests:
              memory: ${POSTGRESQL_MEMORY_LIMIT}              
{{^Ephemeral}}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: syndesis-db-data
          - mountPath: /var/lib/pgsql/sampledb
            name: syndesis-sampledb-config
        volumes:
        - name: syndesis-db-data
          persistentVolumeClaim:
            claimName: syndesis-db
        - configMap:
            defaultMode: 511
            name: syndesis-sampledb-config
          name: syndesis-sampledb-config
{{/Ephemeral}}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: {{ Images.Support.Postgresql }}:{{ Tags.Postgresql }}
          namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
